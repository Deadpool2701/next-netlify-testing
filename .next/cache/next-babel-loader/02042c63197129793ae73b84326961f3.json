{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport scrollIntoViewIfNeeded from \"utils/scroll\";\nimport { FilterMethod } from \"../types\";\nimport { publicFetch } from \"api\";\nimport { toast } from \"react-toastify\";\nconst ELEMENT_ID = \"movies\";\n\nconst initializeFilters = () => ({\n  year: 2021\n});\n\nconst useMovies = moviesList => {\n  const {\n    0: movies,\n    1: setMovies\n  } = useState(moviesList);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(10);\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(initializeFilters());\n  const handleChangeFilter = useCallback(async (event, method) => {\n    setLoading(true);\n    const value = event.target.value;\n\n    switch (method) {\n      case FilterMethod.year:\n        setFilters({\n          year: parseInt(value)\n        });\n        const {\n          data\n        } = await publicFetch.get(`/movies?year=${value}`);\n        setMovies(data.results);\n        setLoading(false);\n        break;\n\n      default:\n        setFilters(initializeFilters());\n        setLoading(false);\n        break;\n    }\n  }, []);\n  const loadMore = useCallback(async () => {\n    const {\n      data\n    } = await publicFetch.get(`/movies?year=${filters.year}&offset=${offset}`);\n    setOffset(prev => prev + 10);\n    setMovies(prev => [...prev, ...data.results]);\n  }, [offset]);\n  const handleFavorite = useCallback(async ({\n    movie_id,\n    url_path\n  }) => {\n    try {\n      const {\n        data\n      } = await publicFetch.post(\"/movies\", {\n        movie_id,\n        url_path\n      });\n\n      if (data.status === \"Success\") {\n        toast(\"Added to your favorite list\");\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }, []);\n  useEffect(() => {\n    if (!loading) {\n      var _document;\n\n      scrollIntoViewIfNeeded((_document = document) === null || _document === void 0 ? void 0 : _document.getElementById(`${ELEMENT_ID}-${(movies === null || movies === void 0 ? void 0 : movies.length) - 10}`), {\n        scrollMode: \"always\",\n        block: \"start\",\n        behavior: \"smooth\",\n        delta: \"-140px\"\n      });\n    }\n  }, [movies]);\n  return {\n    movies,\n    filters,\n    handleChangeFilter,\n    loadMore,\n    loading,\n    handleFavorite\n  };\n};\n\nexport default useMovies;\nexport { ELEMENT_ID };","map":null,"metadata":{},"sourceType":"module"}