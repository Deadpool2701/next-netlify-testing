{"ast":null,"code":"import { useState, useEffect, useCallback } from \"react\";\nimport scrollIntoViewIfNeeded from \"utils/scroll\";\nimport { FilterMethod } from \"../types\";\nimport { publicFetch } from \"api\";\nimport { toast } from \"react-toastify\";\nconst ELEMENT_ID = \"movies\";\n\nconst initializeFilters = () => ({\n  year: 2021\n});\n\nconst useMovies = moviesList => {\n  const {\n    0: movies,\n    1: setMovies\n  } = useState(moviesList);\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: offset,\n    1: setOffset\n  } = useState(10);\n  const {\n    0: filters,\n    1: setFilters\n  } = useState(initializeFilters());\n  const handleChangeFilter = useCallback(async (event, method) => {\n    setLoading(true);\n    const value = event.target.value;\n\n    switch (method) {\n      case FilterMethod.year:\n        setFilters({\n          year: parseInt(value)\n        });\n        const {\n          data\n        } = await publicFetch.get(`/movies?year=${value}`);\n        setMovies(data.results);\n        setLoading(false);\n        break;\n\n      default:\n        setFilters(initializeFilters());\n        setLoading(false);\n        break;\n    }\n  }, []);\n  const loadMore = useCallback(async () => {\n    const {\n      data\n    } = await publicFetch.get(`/movies?year=${filters.year}&offset=${offset}`);\n    setOffset(prev => prev + 10);\n    setMovies(prev => [...prev, ...data.results]);\n  }, [offset]);\n  const handleFavorite = useCallback(async ({\n    movie_id,\n    url_path\n  }) => {\n    try {\n      const {\n        data\n      } = await publicFetch.post(\"/movies\", {\n        movie_id,\n        url_path\n      });\n\n      if (data.status === \"Success\") {\n        toast(\"Added to your favorite list\");\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }, []);\n  useEffect(() => {\n    if (!loading) {\n      var _document;\n\n      scrollIntoViewIfNeeded((_document = document) === null || _document === void 0 ? void 0 : _document.getElementById(`${ELEMENT_ID}-${(movies === null || movies === void 0 ? void 0 : movies.length) - 10}`), {\n        scrollMode: \"always\",\n        block: \"start\",\n        behavior: \"smooth\",\n        delta: \"-140px\"\n      });\n    }\n  }, [movies]);\n  return {\n    movies,\n    filters,\n    handleChangeFilter,\n    loadMore,\n    loading,\n    handleFavorite\n  };\n};\n\nexport default useMovies;\nexport { ELEMENT_ID };","map":{"version":3,"sources":["C:/Users/THARUN/Desktop/Papersdrop/skionetizy_tools/frontend/src/module/movies/hooks/useMovies.ts"],"names":["useState","useEffect","useCallback","scrollIntoViewIfNeeded","FilterMethod","publicFetch","toast","ELEMENT_ID","initializeFilters","year","useMovies","moviesList","movies","setMovies","loading","setLoading","offset","setOffset","filters","setFilters","handleChangeFilter","event","method","value","target","parseInt","data","get","results","loadMore","prev","handleFavorite","movie_id","url_path","post","status","e","console","log","document","getElementById","length","scrollMode","block","behavior","delta"],"mappings":"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","sourcesContent":["import { useState, useEffect, ChangeEvent, useCallback } from \"react\";\nimport scrollIntoViewIfNeeded from \"utils/scroll\";\nimport { Filters, FilterMethod } from \"../types\";\nimport { publicFetch } from \"api\";\nimport { toast } from \"react-toastify\";\n\nconst ELEMENT_ID = \"movies\";\n\nconst initializeFilters = () => ({\n  year: 2021,\n});\n\nconst useMovies = (moviesList: any) => {\n  const [movies, setMovies] = useState<any>(moviesList);\n  const [loading, setLoading] = useState<boolean>(false);\n  const [offset, setOffset] = useState<number>(10);\n  const [filters, setFilters] = useState<Filters>(initializeFilters());\n\n  const handleChangeFilter = useCallback(\n    async (event: ChangeEvent<HTMLSelectElement>, method: FilterMethod) => {\n      setLoading(true);\n      const value = event.target.value;\n      switch (method) {\n        case FilterMethod.year:\n          setFilters({ year: parseInt(value) });\n          const { data } = await publicFetch.get(`/movies?year=${value}`);\n          setMovies(data.results);\n          setLoading(false);\n          break;\n\n        default:\n          setFilters(initializeFilters());\n          setLoading(false);\n          break;\n      }\n    },\n    []\n  );\n\n  const loadMore = useCallback(async () => {\n    const { data } = await publicFetch.get(\n      `/movies?year=${filters.year}&offset=${offset}`\n    );\n    setOffset((prev) => prev + 10);\n    setMovies((prev) => [...prev, ...data.results]);\n  }, [offset]);\n\n  const handleFavorite = useCallback(\n    async ({ movie_id, url_path }: { movie_id: number; url_path: string }) => {\n      try {\n        const { data } = await publicFetch.post(\"/movies\", {\n          movie_id,\n          url_path,\n        });\n        if (data.status === \"Success\") {\n          toast(\"Added to your favorite list\");\n        }\n      } catch (e) {\n        console.log(e);\n      }\n    },\n    []\n  );\n\n  useEffect(() => {\n    if (!loading) {\n      scrollIntoViewIfNeeded(\n        document?.getElementById(`${ELEMENT_ID}-${movies?.length - 10}`),\n        {\n          scrollMode: \"always\",\n          block: \"start\",\n          behavior: \"smooth\",\n          delta: \"-140px\",\n        }\n      );\n    }\n  }, [movies]);\n\n  return {\n    movies,\n    filters,\n    handleChangeFilter,\n    loadMore,\n    loading,\n    handleFavorite,\n  };\n};\nexport default useMovies;\nexport { ELEMENT_ID };\n"]},"metadata":{},"sourceType":"module"}